(window.webpackJsonp=window.webpackJsonp||[]).push([[88],{512:function(t,n,s){"use strict";s.r(n);var _=s(65),v=Object(_.a)({},(function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"_42장-비동기-프로그래밍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_42장-비동기-프로그래밍"}},[t._v("#")]),t._v(" 42장. 비동기 프로그래밍")]),t._v(" "),s("h2",{attrs:{id:"_1-동기-처리와-비동기-처리"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-동기-처리와-비동기-처리"}},[t._v("#")]),t._v(" 1. 동기 처리와 비동기 처리")]),t._v(" "),s("h3",{attrs:{id:"동기-처리"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#동기-처리"}},[t._v("#")]),t._v(" 동기 처리")]),t._v(" "),s("p",[t._v("함수의 실행 순서는 실행 컨텍스트 스택으로 관리함")]),t._v(" "),s("p",[t._v("자바스크립트 엔진은 단 하나의 실행 컨텍스트 스택을 갖음"),s("br"),t._v("\n= 함수를 실행할 수 있는 창구가 하나이며, 동시에 2개 이상의 함수를 동시 실행할 수 없다는 것을 의미")]),t._v(" "),s("p",[t._v("실행 중인 실행 컨텍스트를 제외한 모든 실행 컨텍스트는 실행 대기 중인 태스크들."),s("br"),t._v("\n대기 중인 태스크들은 현재 실행 중인 함수가 종료하면 비로소 실행되기 시작함")]),t._v(" "),s("p",[t._v("이처럼 자바스크립트 엔진은 한 번에 하나의 태스크만 실행할 수 있는 싱글 스레드 방식으로 동작함"),s("br"),t._v("\n싱글 스레드 방식은 한 번에 하나의 태스크만 실행할 수 있기 때문에"),s("br"),t._v("\n처리에 시간이 걸리는 태스크를 실행하는 경우 블로킹(작업 중단)이 발생함")]),t._v(" "),s("p",[t._v("이처럼 현재 실행 중인 태스크가 종료할 때까지 다음에 실행될 태스크가 대기하는 방식을 동기 처리라고 함"),s("br"),t._v("\n동기 처리 방식은 태스크를 순서대로 하나씩 처리하므로 실행 순서가 보장된다는 장점이 있지만,"),s("br"),t._v("\n앞선 태스크가 종료할 때까지 이후 태스크들이 블로킹되는 단점 존재")]),t._v(" "),s("h3",{attrs:{id:"비동기-처리"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#비동기-처리"}},[t._v("#")]),t._v(" 비동기 처리")]),t._v(" "),s("p",[t._v("setTimeout 함수는 일정 시간이 경과한 이후에 콜백 함수를 호출하지만"),s("br"),t._v("\nsetTimeout 함수 이후의 태스크를 블로킹하지 않고 곧바로 실행함")]),t._v(" "),s("p",[t._v("이처럼 현재 실행 중인 태스크가 종료되지 않은 상태라 해도"),s("br"),t._v("\n다음 태스크를 곧바로 실행하는 방식을 비동기 처리라고 함")]),t._v(" "),s("p",[t._v("비동기 처리 방식은 현재 실행 중인 태스크가 종료되지 않은 상태여도"),s("br"),t._v("\n다음 태스크를 곧바로 실행하므로 블로킹이 발생하지 않는다는 장점이 있지만,"),s("br"),t._v("\n태스크의 실행 순서가 보장되지 않는 단점 있음")]),t._v(" "),s("p",[t._v("비동기 처리를 수행하는 비동기 함수는 전통적으로 콜백 패턴을 사용하지만"),s("br"),t._v("\n콜백 헬을 발생시켜 가독성을 나쁘게 하고, 비동기 처리 중 발생한 에러의 예외 처리가 곤란하며,"),s("br"),t._v("\n여러 개의 비동기 처리를 한 번에 처리하는 데도 한계가 있음 (-> 때문에 프로미스 사용)")]),t._v(" "),s("p",[t._v("타이머 함수(setTimeout / setInterval), HTTP 요청, 이벤트 핸들러는 비동기 처리 방식으로 동작함"),s("br"),t._v("\n비동기 처리는 이벤트 루프와 태스크 큐와 깊은 관계가 있음")]),t._v(" "),s("h2",{attrs:{id:"_2-이벤트-루프와-태스크-큐"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-이벤트-루프와-태스크-큐"}},[t._v("#")]),t._v(" 2. 이벤트 루프와 태스크 큐")]),t._v(" "),s("p",[t._v("자바스크립트는 싱글 스레드로 동작하지만 브라우저는 많은 태스크가 동시 처리되는 것처럼 느껴짐"),s("br"),t._v("\n애니메이션 효과를 통해 움직이면서 이벤트를 처리하기도 하고, 서버로부터 데이터를 가지고 오면서 렌더링하기도 함"),s("br"),t._v("\n이처럼 자바스크립트의 동시성을 지원하는 것이 바로 이벤트 루프."),s("br"),t._v("\n이벤트 루프는 브라우저에 내장되어 있는 기능 중 하나.")]),t._v(" "),s("p",[t._v("대부분의 자바스크립트 엔진은 크게 2개의 영역으로 구분 가능함")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("콜 스택")]),s("br"),t._v(" "),s("strong",[t._v("실행 컨텍스트가 추가/제거되는 스택 자료구조인 실행 컨텍스트 스택이 바로 콜 스택")]),s("br"),t._v("\n함수를 호출하면 함수 실행 컨텍스트가 순차적으로 콜 스택에 푸시되어 순차적으로 실행됨"),s("br"),t._v("\n자바스크립트 엔진은 단 하나의 콜 스택을 사용하기 때문에 최상위 실행 컨텍스트가 종료되어"),s("br"),t._v("\n콜 스택에서 제거되기 전까지는 다른 어떤 태스크도 실행되지 않음")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("힙")]),s("br"),t._v(" "),s("strong",[t._v("힙은 객체가 저장되는 메모리 공간")]),s("br"),t._v("\n콜 스택의 요소인 실행 컨텍스트는 힙에 저장된 객체를 참조함"),s("br"),t._v("\n메모리에 값을 저장하려면 먼저 값을 저장할 메모리 공간의 크기를 결정해야 함"),s("br"),t._v("\n객체는 원시 값과는 달리 크기가 정해져 있지 않으므로"),s("br"),t._v("\n할당해야 할 메모리 공간의 크기를 런타임에 결정(동적 할당)해야 함"),s("br"),t._v("\n따라서 객체가 저장되는 메모리 공간인 힙은 구조화되어 있지 않다는 특징이 있음")])])]),t._v(" "),s("p",[t._v("이처럼 콜 스택과 힙으로 구성되어 있는 자바스크립트 엔진은 단순히"),s("br"),t._v("\n태스크가 요청되면 콜 스택을 통해 요청된 작업을 순차적으로 실행할 뿐"),s("br"),t._v("\n비동기 처리에서 소스코드의 평가와 실행을 제외한 모든 처리는 브라우저 또는 Node.js가 담당함.")]),t._v(" "),s("p",[t._v("ex) 비동기 방식으로 동작하는 setTimeout의 콜백 함수의 평가와 실행은 자바스크립트 엔진이 담당하지만"),s("br"),t._v("\n호출 스케줄링을 위한 타이머 설정과 콜백 함수의 등록은 브라우저 또는 Node.js가 담당"),s("br"),t._v("\n이를 위해 브라우저 환경은 태스크 큐와 이벤트 루프를 제공함")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("태스크 큐")]),s("br"),t._v("\n비동기 함수의 콜백 함수 또는 이벤트 핸들러가 일시적으로 보관되는 영역."),s("br"),t._v("\n별도로 프로미스의 후속 처리 메서드의 콜백 함수가 일시적으로 보관되는 마이크로태스크 큐도 존재")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("이벤트 루프")]),s("br"),t._v("\n콜 스택에 현재 실행 중인 실행 컨텍스트가 있는지,"),s("br"),t._v("\n태스크 큐에 대기 중인 함수(콜백 함수, 이벤트 핸들러 등)가 있는지 반복해서 확인함")]),t._v(" "),s("p",[t._v("만약 콜 스택이 비어 있고 태스크 큐에 대기 중인 함수가 있다면 이벤트 루프는"),s("br"),t._v("\n순차적으로 태스크 큐에 대기 중인 함수를 콜 스택으로 이동시킴"),s("br"),t._v("\n이때 콜 스택으로 이동한 함수는 실행됨"),s("br"),t._v("\n즉, 태스크 큐에 일시 보관된 함수들은 비동기 처리 방식으로 동작함")])])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bar'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("foo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0초(실제는 4ms) 후에 foo 함수가 호출된다.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ol",[s("li",[s("p",[t._v("전역 코드가 평가되어 전역 실행 컨텍스트가 생성되고 콜 스택에 푸시됨")])]),t._v(" "),s("li",[s("p",[t._v("전역 코드가 실행되기 시작해 setTimeout 함수가 호출됨"),s("br"),t._v("\nsetTimeout 함수 실행 컨텍스트가 생성 -> 콜스택에 푸시되어 현재 실행 중인 실행 컨텍스트가 됨"),s("br"),t._v("\n(브라우저의 Web API(호스트 객체)인 타이머 함수도 함수이므로 함수 실행 컨텍스트를 생성함)")])]),t._v(" "),s("li",[s("p",[t._v("setTimeout 함수가 실행되면 콜백 함수를 호출 스케줄링하고 종료되어 콜 스택에서 팝 됨"),s("br"),t._v("\n(타이머 설정과 타이머가 만료되면 콜백 함수를 태스크 큐에 푸시하는 것은 브라우저의 역할)")])]),t._v(" "),s("li",[s("p",[t._v("브라우저가 수행하는 4-1과 자바스크립트 엔진이 수행하는 4-2는 병행 처리됨"),s("br"),t._v("\n4-1."),s("br"),t._v("\n브라우저는 타이머를 설정하고 타이머의 만료를 기다림"),s("br"),t._v("\n타이머가 만료되면 콜백 함수 foo가 태스크 큐에 푸시됨"),s("br"),t._v("\n최소 지연 시간 4ms가 지정되므로 4ms 후에 콜백 함수 foo가 태스크 큐에 푸시되어 대기하게 됨"),s("br"),t._v("\n이 처리는 브라우저가 수행")]),t._v(" "),s("p",[t._v("지연 시간 이후에 콜백 함수가 태스크 큐에 푸시되어 대기하게 되지만"),s("br"),t._v("\n콜 스택이 비어야 호출되므로 약간의 시간차가 발생할 수 있기 때문에"),s("br"),t._v("\nsetTimeout 함수로 호출 스케줄링한 콜백 함수는 정확히 지연 시간 후에 호출된다는 보장은 없음")]),t._v(" "),s("p",[t._v("4-2."),s("br"),t._v("\nbar 함수가 호출되어 bar 함수의 함수 실행 컨텍스트가 생성되고"),s("br"),t._v("\n콜 스택에 푸시되어 현재 실행 중인 실행 컨텍스트가 됨"),s("br"),t._v("\n이후 bar 함수가 종료되어 콜 스택에서 팝 됨"),s("br"),t._v("\n이때 브라우저가 타이머를 설정한 후 4ms가 경과했다면 foo 함수는 아직 태스크 큐에서 대기 중")])]),t._v(" "),s("li",[s("p",[t._v("전역 코드 실행이 종료되고 전역 실행 컨텍스트가 콜 스택에서 팝 됨"),s("br"),t._v("\n이로서 콜 스택에는 아무런 실행 컨텍스트도 존재하지 않게 됨")])]),t._v(" "),s("li",[s("p",[t._v("이벤트 루프에 의해 콜 스택이 비어 있음이 감지되고 태스크 큐에서 대기 중인"),s("br"),t._v("\n콜백 함수 foo가 이벤트 루프에 의해 콜 스택에 푸시됨"),s("br"),t._v("\n이후 foo 함수가 종료되어 콜 스택에서 팝 됨")])])]),t._v(" "),s("p",[t._v("비동기 함수인 setTimeout의 콜백 함수는 태스크 큐에 푸시되어 대기하다가 콜 스택이 비게 되면,"),s("br"),t._v("\n(=전역 코드 및 명시적으로 호출된 함수가 모두 종료하면) 비로소 콜 스택에 푸시되어 실행됨")]),t._v(" "),s("p",[t._v("자바스크립트는 싱글 스레드 방식으로 동작하지만"),s("br"),t._v("\n싱글 스레드 방식으로 동작하는 것은 브라우저가 아니라 브라우저에 내장된 자바스크립트 엔진이라는 것."),s("br"),t._v("\n즉, "),s("strong",[t._v("자바스크립트 엔진은 싱글 스레드로 동작하지만 브라우저는 멀티 스레드로 동작함")])]),t._v(" "),s("p",[t._v("브라우저는 자바스크립트 엔진 외에도 렌더링 엔진과 Web API를 제공함"),s("br"),t._v("\nWeb API는 ECMAScript 사양에 정의된 함수가 아니라 브라우저에서 제공하는 API이며,"),s("br"),t._v("\nDOM API와 타이머 함수, HTTP 요청(Ajax)과 같은 비동기 처리를 포함함")]),t._v(" "),s("p",[t._v("위 예제에서 살펴봤듯이 브라우저의 Web API인 setTimeout 함수가 호출되면 콜 스택에 푸시되어 실행됨"),s("br"),t._v("\n하지만 타이머 설정과 타이머 만료 시 콜백 함수를 태스크 큐에 등록하는 처리는 브라우저가 실행함"),s("br"),t._v("\n이처럼 브라우저와 자바스크립트 엔진이 협력하여 비동기 함수인 setTimeout 함수를 실행함")])])}),[],!1,null,null,null);n.default=v.exports}}]);