(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{410:function(t,s,a){"use strict";a.r(s);var n=a(44),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_06장-데이터-타입"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_06장-데이터-타입"}},[t._v("#")]),t._v(" 06장. 데이터 타입")]),t._v(" "),a("ul",[a("li",[t._v("데이터 타입은 값의 종류를 말함")]),t._v(" "),a("li",[t._v("자바스크립트의 모든 값은 데이터 타입을 가짐")]),t._v(" "),a("li",[t._v("ES6는 7개의 데이터 타입을 제공. (원시 타입과 객체 타입으로 나뉨)"),a("br"),t._v("\n원시 타입 = 숫자(정수, 실수 구분 X), 문자열, 불리언, undefined, null, symbol"),a("br"),t._v("\n객체 타입 = 객체, 함수, 배열 등")]),t._v(" "),a("li",[t._v("ES11에서 새로운 원시값 BigInt가 추가됨 => ES11 기준 제공하는 데이터 타입 총 8개"),a("br"),t._v("\n숫자값을 안정적으로 나타낼 수 있는 최대치보다 더 큰 정수를 표현할 수 있는 새로운 원시값"),a("br"),t._v("\n정수 리터럴 뒤에 n을 붙이거나 BigInt 함수를 호출해 생성")])]),t._v(" "),a("h2",{attrs:{id:"_1-숫자-타입"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-숫자-타입"}},[t._v("#")]),t._v(" 1. 숫자 타입")]),t._v(" "),a("ul",[a("li",[t._v("독특하게 하나의 숫자 타입만 존재 (C나 자바의 경우 int, long, float, double 등 다양함)")]),t._v(" "),a("li",[t._v("배정밀도 64비트 부동소수점 형식을 따름."),a("br"),t._v("\n즉, 모든 수를 실수로 처리. (정수만 표현하기 위한 데이터 타입이 별도로 존재하지 않음)"),a("br"),t._v("\n정수로 표시되는 수끼리 나눠도 실수가 나올 수 있음"),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//2")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1.5")]),t._v("\n")])])])]),t._v(" "),a("li",[t._v("정수, 실수, 2/8/16진수 리터럴은 모두 메모리에 배정밀도 63비트 부동소수점 형식의 2진수로 저장됨"),a("br"),t._v("\n2/8/16진수를 표현하기 위한 데이터 타입을 제공하지 않기 때문에 해당 값을 참조하면 모두 10진수로 해석됨"),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" binary "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b01000001")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//2진수")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" octal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0o101")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//8진수")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" hex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x41")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//16진수")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("binary"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 65")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("octal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 65")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 65")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("binary "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" octal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("octal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" hex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])])]),t._v(" "),a("li",[t._v("숫자 타입은 추가적으로 세 가지의 특별한 값도 표현 가능\n"),a("ul",[a("li",[t._v("Infinity : 양의 무한대")]),t._v(" "),a("li",[t._v("-Infinity : 음의 무한대")]),t._v(" "),a("li",[t._v("NaN : 산수 연산 불가")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Infinity")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//-Infinity")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'String'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//NaN")]),t._v("\n")])])])]),t._v(" "),a("li",[t._v("자바스크립트 엔진은 NaN, Nan, nan을 값이 아닌 식별자로 해석함")])]),t._v(" "),a("h2",{attrs:{id:"_2-문자열-타입"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-문자열-타입"}},[t._v("#")]),t._v(" 2. 문자열 타입")]),t._v(" "),a("ul",[a("li",[t._v("텍스트 데이터를 나타내는데 사용")]),t._v(" "),a("li",[t._v("0개 이상의 16비트 유니코드 문자(UFT-16)의 집합으로 전 세계 대부분의 문자 표현이 가능")]),t._v(" "),a("li",[t._v("작은 따옴표, 큰 따옴표, 백틱(ES6)으로 텍스트를 감쌈 (일반적으로 작은 따옴표 사용)")]),t._v(" "),a("li",[t._v("문자열을 따옴표로 감싸는 이유는 키워드나 식별자 같은 토큰과 구분하기 위해서."),a("br"),t._v("\n따옴표로 감싸지 않으면 자바스크립트 엔진은 키워드나 식별자 같은 토큰으로 인식함")]),t._v(" "),a("li",[t._v("JS의 문자열은 원시타입이며, 변경 불가능한 값. 문자열이 생성되면 그 문자열을 변경할 수 없음"),a("br"),t._v("\n(C는 문자열 타입을 제공하지 않고 문자의 배열로 문자열을 표현하고, 자바는 문자열을 객체로 표현함)")])]),t._v(" "),a("h2",{attrs:{id:"_3-템플릿-리터럴"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-템플릿-리터럴"}},[t._v("#")]),t._v(" 3. 템플릿 리터럴")]),t._v(" "),a("ul",[a("li",[t._v("ES6부터 도입된 새로운 문자열 표기법")]),t._v(" "),a("li",[t._v("멀티라인 문자열, 표현식 삽입, 태그드 템플릿 등 편리한 문자열 처리 기능을 제공함")]),t._v(" "),a("li",[t._v("런타임에 일반 문자열로 변환되어 처리됨")]),t._v(" "),a("li",[t._v("일반적인 따옴표 대신 백틱을 사용해 표현함"),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" template "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("Template literal")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("template"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Template literal")]),t._v("\n")])])])])]),t._v(" "),a("h3",{attrs:{id:"_3-1-멀티라인-문자열"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-멀티라인-문자열"}},[t._v("#")]),t._v(" 3-1. 멀티라인 문자열")]),t._v(" "),a("ul",[a("li",[t._v("기존에는 일반 문자열 내에 줄바꿈이 허용되지 않아 백슬래시로 시작하는 이스케이프 시퀀스를 사용해야 했음")]),t._v(" "),a("li",[t._v("템플릿 리터럴 내에서는 줄바꿈이 허용되며 모든 공백도 있는 그대로 적용됨")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" template "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('<ul>\n    <li><a href="#">Home</a></li>\n</ul>')]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("개행 문자 : 텍스트의 한 줄이 끝남을 표시하는 문자 또는 문자열"),a("br"),t._v("\n개행 문자에는 라인 피드(\\n)와 캐리지 리턴(\\r)이 있음."),a("br"),t._v("\n(과거 타자기에서 커서를 제어하는 방식에서 비롯된 것)"),a("br"),t._v("\n운영체제마다 다른 체계의 개행 방식을 이용하기 때문에 서로 개행 문자를 인식하지 못함"),a("br"),t._v("\n단, 대부분의 텍스트 에디터는 운영체제에 맞게 개행 문자를 자동으로 변환해주므로 큰 문제는 없음"),a("br"),t._v("\nJS에서 라인 피드와 캐리지 리턴은 모두 개행을 의미하지만 일반적으로 라인 피들르 사용해 개행함")])]),t._v(" "),a("h3",{attrs:{id:"_3-2-표현식-삽입"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-표현식-삽입"}},[t._v("#")]),t._v(" 3-2. 표현식 삽입")]),t._v(" "),a("ul",[a("li",[t._v("기존에는 문자열 연산자 + 를 사용해 문자열을 연결함."),a("br"),t._v("\n(+ 연산자는 피연산자 중 하나 이상이 문자열인 경우 문자열 연결 연산자로 동작)")]),t._v(" "),a("li",[t._v("템플릿 리터럴 내에서는 표현식 삽입을 통해 간단히 문자열을 삽입할 수 있음")]),t._v(" "),a("li",[t._v("표현식을 삽입하려면 ${}로 표현식을 감쌈."),a("br"),t._v("\n표현식의 평가 결과가 문자열이 아니더라도 문자열로 타입이 강제 변환되어 삽입됨")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" first "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'soyoung'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" last "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'park'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("My name is ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("first"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v(" ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("last"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//My name is soyoung park")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("1 + 2 = ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1 + 2 = 3")]),t._v("\n")])])]),a("h2",{attrs:{id:"_4-불리언-타입"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-불리언-타입"}},[t._v("#")]),t._v(" 4. 불리언 타입")]),t._v(" "),a("ul",[a("li",[t._v("true / false")]),t._v(" "),a("li",[t._v("조건문에서 자주 사용함")])]),t._v(" "),a("h2",{attrs:{id:"_5-undefined-타입"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-undefined-타입"}},[t._v("#")]),t._v(" 5. undefined 타입")]),t._v(" "),a("ul",[a("li",[t._v("개발자가 의도적으로 할당하기 위한 값이 아니라 자바스크립트 엔진이 변수를 초기화할 때 사용하는 값."),a("br"),t._v("\nvar 키워드로 선언한 변수는 암묵적으로 undefined로 초기화됨"),a("br"),t._v("\n변수 참조 시 undefined가 반환된다면 참조한 변수가 선언 이후 값이 할당되지 않았음을 알 수 있음")]),t._v(" "),a("li",[t._v("undefined를 의도적으로 변수에 할당하는 것은 권장하지 않음 (본래 취지와 어긋나고 혼란을 줄 수 있음)"),a("br"),t._v("\n변수에 값이 없음을 명시하고 싶을 때는 undefined 대신 null 할당")])]),t._v(" "),a("blockquote",[a("p",[t._v("자바스크립트의 undefined에서 말하는 정의는 변수에 값을 할당해 변수의 실체를 명확히 하는 것."),a("br"),t._v("\nC언어의 경우 선언과 정의를 엄격하게 구분해서 사용하는데"),a("br"),t._v("\n(선언: 컴파일러에 단순히 식별자의 존재 알림, 정의: 컴파일러가 변수를 생성해 식별자와 메모리 주소가 연결됨)"),a("br"),t._v("\n자바스크립트는 변수 선언 시 암묵적으로 정의가 이뤄지기 때문에 선언과 정의의 구분이 모호함")])]),t._v(" "),a("h2",{attrs:{id:"_6-null-타입"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-null-타입"}},[t._v("#")]),t._v(" 6. null 타입")]),t._v(" "),a("ul",[a("li",[t._v("변수에 값이 없다는 것을 의도적으로 명식(의도적 부재)할 때 사용")]),t._v(" "),a("li",[t._v("변수에 null을 할당하는 것은 변수가 이전에 참조하던 값을 더 이상 참조하지 않겠다는 의미"),a("br"),t._v("\n(자바스립트 엔진은 누구도 참조하지 않는 메모리 공간에 대해 가비지 콜렉션을 수행함)")]),t._v(" "),a("li",[t._v("함수가 유효한 값을 반환할 수 없는 경우 명시적으로 null을 반환하기도 함")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Lee'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nfoo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 이전 참조 제거. 하지만 이런 경우 변수의 스코프르 좁게 만들어 변수 자체를 빨리 소멸시키는게 더 효율적.")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" element "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" documet"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("querySelector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.myClass'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//HTML문서에 myClass 요소가 없을 경우 null 반환")]),t._v("\n")])])]),a("h2",{attrs:{id:"_7-심벌-타입"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-심벌-타입"}},[t._v("#")]),t._v(" 7. 심벌 타입")]),t._v(" "),a("ul",[a("li",[t._v("ES6에서 추가된 7번째 타입으로 변경 불가능한 원시 타입의 값")]),t._v(" "),a("li",[t._v("다른 값과 중복되지 않는 유일무이한 값."),a("br"),t._v("\n주로 이름 충돌 위험이 없는 객체의 유일한 프로퍼티 키를 만들기 위해 사용")]),t._v(" "),a("li",[t._v("심벌 이외의 원시 값은 리터럴을 통해 생성하지만 심벌은 Symbol 함수를 호출해 생성함.")]),t._v(" "),a("li",[t._v("생성된 심벌 값은 외부에 노출되지 않으며, 다른 값과 절대 중복되지 않는 유일무이한 값")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'key'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//symbol")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'value'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//이름 충돌 위험 없는 심벌을 프로퍼티 키로 사용")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//value")]),t._v("\n")])])]),a("h2",{attrs:{id:"_8-객체-타입"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-객체-타입"}},[t._v("#")]),t._v(" 8. 객체 타입")]),t._v(" "),a("ul",[a("li",[t._v("자바스크립트는 객체 기반의 언어이고, 자바스크립트를 이루고 있는 거의 모든 것이 객체임")]),t._v(" "),a("li",[t._v("지금까지 살펴본 6가지 데이터 타입 이외의 갑은 모두 객체 타입")]),t._v(" "),a("li",[t._v("객체 타입은 11장에서 자세히 살펴보기로 함")])]),t._v(" "),a("h2",{attrs:{id:"_9-데이터-타입의-필요성"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-데이터-타입의-필요성"}},[t._v("#")]),t._v(" 9. 데이터 타입의 필요성")]),t._v(" "),a("p",[t._v("데이터 타입은 왜 필요한걸까?")]),t._v(" "),a("ul",[a("li",[t._v("값을 저장할 때 확보해야 하는 메모리 공간의 크기를 결정하기 위해")]),t._v(" "),a("li",[t._v("값을 참조할 때 한번에 읽어 들여야 할 메모리 공간의 크기를 결정하기 위해")]),t._v(" "),a("li",[t._v("메모리에서 읽어 들인 2진수를 어떻게 해석할지 결정하기 위해")])]),t._v(" "),a("h3",{attrs:{id:"_9-1-데이터-타입에-의한-메모리-공간의-확보와-참조"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-1-데이터-타입에-의한-메모리-공간의-확보와-참조"}},[t._v("#")]),t._v(" 9-1. 데이터 타입에 의한 메모리 공간의 확보와 참조")]),t._v(" "),a("p",[t._v("메모리에 값을 저장하려면 확보해야할 메모리 공간 크기를 결정해야 함"),a("br"),t._v("\n(몇 바이트의 메모리 공간을 사용해야 낭비와 손실 없이 값을 저장할 수 있을지 알아야 함)"),a("br"),t._v("\n자바스크립트 엔진은 데이터 타입(=값의 종류)에 따라 정해진 크기의 메모리 공간을 확보함")]),t._v(" "),a("blockquote",[a("p",[t._v("ECMAScript 사양은 문자열과 숫자 타입(배정밀도 64비트 부동소수점 형식 사용) 외"),a("br"),t._v("\n다른 데이터 타입의 크기를 명시적으로 규정하고 있지 않음."),a("br"),t._v("\n따라 문자열과 숫자 타입을 제외하고 데이터 타입에 따라 확보되는 메모리 공간의 크기는"),a("br"),t._v("\n자바스크립트 엔진 제조사의 구현에 따라 다를 수 있음")])]),t._v(" "),a("p",[t._v("값 참조도 마찬가지로 식별자를 통해 값이 저장되어있는 메모리 공간의 주소를 찾아갈 수 있는데"),a("br"),t._v("\n(정확히 말하면 값이 저장되어있는 메모리 공간의 선두 메모리 셀의 주소)"),a("br"),t._v("\n값을 참조하려면 한 번에 읽어들여야 할 메모리 공간의 크기 (=메모리 셀의 갯수. 바이트 수)를 알아야 함"),a("br"),t._v("\n컴퓨터는 데이터 타입에 따라 한번에 읽어 들여야 할 메모리 셀의 크기를 지정함")]),t._v(" "),a("blockquote",[a("p",[t._v("컴파일러 또는 인터프리터는 심벌 테이블이라고 부르는 자료구조를 통해"),a("br"),t._v("\n식별자를 키로 바인딩된 값의 메모리 주소, 데이터 타입, 스코프 등을 관리함")])]),t._v(" "),a("h3",{attrs:{id:"_9-2-데이터-타입에-의한-값의-해석"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-2-데이터-타입에-의한-값의-해석"}},[t._v("#")]),t._v(" 9-2. 데이터 타입에 의한 값의 해석")]),t._v(" "),a("p",[t._v("변수 참조 시 메모리 공간의 주소에서 읽어 들인 2진수를 데이터 타입에 따라 해석")]),t._v(" "),a("h2",{attrs:{id:"_10-동적-타이핑"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-동적-타이핑"}},[t._v("#")]),t._v(" 10. 동적 타이핑")]),t._v(" "),a("h3",{attrs:{id:"_10-1-동적-타입-언어와-정적-타입-언어"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-1-동적-타입-언어와-정적-타입-언어"}},[t._v("#")]),t._v(" 10-1. 동적 타입 언어와 정적 타입 언어")]),t._v(" "),a("p",[t._v("변수는 타입을 가질까?"),a("br"),t._v("\n기본적으로 변수는 타입을 가지지 않지만 값은 타입을 가짐."),a("br"),t._v("\n따라 현재 변수에 할당되어있는 값에 의해 변수의 타입이 동적으로 결정된다고 표현하는 것이 더 적절")]),t._v(" "),a("p",[t._v("<정적 타입 언어>")]),t._v(" "),a("ul",[a("li",[t._v("변수 선언시 변수에 할당 가능한 값의 종류, 즉 데이터 타입을 사전에 선언해야 함 (=명시적 타입 선언)")]),t._v(" "),a("li",[t._v("변수 선언 시점에 변수 타입이 결정되고, 변수의 타입을 변경할 수 없으며, 선언한 타입에 맞는 값만 할당 가능")]),t._v(" "),a("li",[t._v("컴파일 시점에 타입 체크 (선언한 데이터 타입에 맞는 값을 할당했는지 검사)를 수행함"),a("br"),t._v("\n타입 체크 통과하지 못할 경우 에러를 발생시키고 프로그램 실행 자체를 막음")]),t._v(" "),a("li",[t._v("타입의 일관성을 강제함으로써 더욱 안정적인 코드의 구현으로 런타임에 발생하는 에러를 줄임")]),t._v(" "),a("li",[t._v("C, C++, JAVA, 코틀린, GO, 하스켈, 러스트, 스칼라 등")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("char c; //1바이트 정수 타입의 값만 할당 가능\nint num; //4바이트 정수 타입의 값만 할당 가능\n")])])]),a("br"),t._v(" "),a("p",[t._v("<동적 타입 언어>")]),t._v(" "),a("ul",[a("li",[t._v("변수 선언 시 타입을 선언하지 않음")]),t._v(" "),a("li",[t._v("어떠한 데이터 타입의 값이라도 자유롭게 할당 가능함")]),t._v(" "),a("li",[t._v("선언이 아닌 값이 할당하는 시점에 할당에 의해 타입 결정 (=타입 추론, 동적 타이핑)"),a("br"),t._v("\n재할당에 의해 변수의 타입은 언제든지 동적으로 변할 수 있음")]),t._v(" "),a("li",[t._v("Javascript, 파이썬, php, 루비, 리스프, 펄 등")])]),t._v(" "),a("h3",{attrs:{id:"_10-2-동적-타입-언어와-변수"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-2-동적-타입-언어와-변수"}},[t._v("#")]),t._v(" 10-2. 동적 타입 언어와 변수")]),t._v(" "),a("p",[t._v("동적 타입 언어는 변수에 어떤 값이라도 자유롭게 할당 가능하기 때문에"),a("br"),t._v("\n데이터 타입에 무감각해질 정도로 편리함.")]),t._v(" "),a("p",[t._v("모든 소프트웨어 아키텍처에는 트레이드 오프(하나를 달성하려고 하면 하나가 희생되는 모순적 관계)가 존재하며,"),a("br"),t._v("\n동적 타입 언어 또한 구조적인 단점이 있음")]),t._v(" "),a("ul",[a("li",[t._v("변수 값이 언제든 변경될 수 있기 때문에 복잡한 프로그램에서는 변화하는 변수 값 추적 어려움")]),t._v(" "),a("li",[t._v("동적 타입 언어의 변수는 값 확인 전까지는 타입을 확신할 수 없음"),a("br"),t._v("\n특히 자바스크립트는 개발자의 의도와 상관없이 자바스크립트 엔진에 의해"),a("br"),t._v("\n암묵적으로 타입이 자동으로 변환되기도 함 (잘못된 예측의 가능성 -> 오류)")]),t._v(" "),a("li",[t._v("유연성은 높지만 신뢰성은 떨어짐")])]),t._v(" "),a("br"),t._v(" "),a("p",[t._v("따라 변수를 사용할 때 주의할 사항은 아래와 같음")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("변수는 꼭 필요한 경우에 한해 제한적으로 사용.")]),a("br"),t._v("\n재할당에 의해 변수 값은 언제든지 변경될 수 있음 -> 타입을 잘못 예측해 오류 발생 가능성 큼."),a("br"),t._v("\n따라 변수의 무분별한 남발은 금물이며 필요한 만큼 최소한으로 유지 필요")]),t._v(" "),a("li",[a("strong",[t._v("변수의 유효 범위 (스코프)는 최대한 좁게 만들어 변수의 부작용을 억제.")]),a("br"),t._v("\n변수의 유효범위가 넓을수록 변수로 인해 오류 발생 확률 높아짐")]),t._v(" "),a("li",[a("strong",[t._v("전역 변수는 최대한 사용하지 않도록.")]),a("br"),t._v("\n어디서든 참조/변경 가능한 전역 변수는 의도치 않게 값 변경 가능성 높고, 다른 코드에 영향 줄 가능성 높음"),a("br"),t._v("\n따라 프로그램의 복잡성 증가시키고 처리 흐름을 추적하기 어렵게 만들고, 오류 원인 특정하기 어렵게 만듬")]),t._v(" "),a("li",[a("strong",[t._v("변수보다는 상수를 사용해 값의 변경을 억제")])]),t._v(" "),a("li",[a("strong",[t._v("변수명은 의미나 목적을 파악할 수 있도록 네이밍")]),a("br"),t._v("\n변수명 뿐 아니라 모든 식별자는 존재 이유 파악하기 쉽도록 적절한 이름으로 지어야 함"),a("br"),t._v("\n특히 식별자의 유효 범위가 넓을수록 명확한 이름을 명명하도록 노력해야 함")])]),t._v(" "),a("p",[t._v("코드는 오해하지 않도록 작성해야 함."),a("br"),t._v("\n동작하는 것만이 코드의 존재 목적이 아님. 코드는 개발자를 위한 문서이기도 함."),a("br"),t._v("\n따라 가독성 좋은 코드가 좋은 코드.")])])}),[],!1,null,null,null);s.default=r.exports}}]);