(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{395:function(t,s,a){"use strict";a.r(s);var n=a(44),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"값-value-과-참조-reference"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#값-value-과-참조-reference"}},[t._v("#")]),t._v(" 값(value)과 참조(reference)")]),t._v(" "),a("h2",{attrs:{id:"자바스크립트에서-값과-참조"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#자바스크립트에서-값과-참조"}},[t._v("#")]),t._v(" 자바스크립트에서 값과 참조")]),t._v(" "),a("ul",[a("li",[t._v("값에 의한 전달(passed by value)이 일어나는 5가지 원시 타입 : Boolean, Null, Undefined, String, Number")]),t._v(" "),a("li",[t._v("참조에 의한 전달(passed by reference)이 일어나는 3가지의 객체 타입 : Array, Function, Object")])]),t._v(" "),a("h2",{attrs:{id:"원시타입"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#원시타입"}},[t._v("#")]),t._v(" 원시타입")]),t._v(" "),a("ul",[a("li",[t._v("원시타입이 변수에 할당되면 해당 변수는 원시타입을 가졌다고 볼 수 있음")]),t._v(" "),a("li",[t._v("해당 변수를 다른 변수에 "),a("code",[t._v("=")]),t._v(" 키워드를 이용해 할당하면 새로운 변수에 값을 복사하게 됨"),a("br"),t._v("\n(같은 값을 가지게 되지만 분리되어 있음. 값을 바꾸더라도 다른 변수에는 영향 X)")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" y "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//10, 'abc', 10, 'abc'")]),t._v("\n")])])]),a("h3",{attrs:{id:"객체"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#객체"}},[t._v("#")]),t._v(" 객체")]),t._v(" "),a("ul",[a("li",[t._v("원시 타입이 아닌 값이 할당된 변수들은 값으로 향하는 참조(reference)를 가지게 됨"),a("br"),t._v("\n(참조는 실제 값이 아닌 메모리에서의 객체의 위치를 가리킴)")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" arr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\narr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[t._v("변수 arr이 가진 변수의 값(주소)는 정적임")]),t._v(" "),a("li",[t._v("변수의 값이 변경되는게 아닌 메모리 속의 배열 값만 변경")]),t._v(" "),a("li",[t._v("push 같은 일을 할 때 자바스크립트 엔진은 메모리 속의 arr 위치로 이동 -> 그곳에 저장된 정보를 이용해 작업 수행")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Variables")]),t._v(" "),a("th",[t._v("Values")]),t._v(" "),a("th",[t._v("Addresses")]),t._v(" "),a("th",[t._v("Objects")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("arr")]),t._v(" "),a("td",[t._v("<#001>(주소)")]),t._v(" "),a("td",[t._v("#001")]),t._v(" "),a("td",[t._v("[]")])])])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Variables")]),t._v(" "),a("th",[t._v("Values")]),t._v(" "),a("th",[t._v("Addresses")]),t._v(" "),a("th",[t._v("Objects")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("arr")]),t._v(" "),a("td",[t._v("<#001>(주소)")]),t._v(" "),a("td",[t._v("#001")]),t._v(" "),a("td",[t._v("[1]")])])])]),t._v(" "),a("h3",{attrs:{id:"참조로-할당하기"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#참조로-할당하기"}},[t._v("#")]),t._v(" 참조로 할당하기")]),t._v(" "),a("ul",[a("li",[t._v("객체 같은 참조 타입의 값이 "),a("code",[t._v("=")]),t._v(" 키워드를 이용해 다른 변수로 복사될 때"),a("br"),t._v("\n값의 주소는 원시타입의 할당처럼 실제로 복사됨. (객체는 값 대신 참조로 복사)")]),t._v(" "),a("li",[t._v("각각의 변수는 같은 배열로 향하는 레퍼런스를 가짐")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reference "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" refCopy "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" reference"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nreference"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reference"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" refCopy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [1,2], [1,2]")]),t._v("\n")])])]),a("table",[a("thead",[a("tr",[a("th",[t._v("Variables")]),t._v(" "),a("th",[t._v("Values")]),t._v(" "),a("th",[t._v("Addresses")]),t._v(" "),a("th",[t._v("Objects")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("reference")]),t._v(" "),a("td",[t._v("<#001>")]),t._v(" "),a("td",[t._v("#001")]),t._v(" "),a("td",[t._v("[1]")])]),t._v(" "),a("tr",[a("td",[t._v("reference")]),t._v(" "),a("td",[t._v("<#001>")]),t._v(" "),a("td"),t._v(" "),a("td")])])]),t._v(" "),a("h3",{attrs:{id:"참조-재할당하기"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#참조-재할당하기"}},[t._v("#")]),t._v(" 참조 재할당하기")]),t._v(" "),a("p",[t._v("참조 재할당은 오래된 참조를 대체함")]),t._v(" "),a("ol",[a("li",[t._v("객체 생성")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("first"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'reference'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("table",[a("thead",[a("tr",[a("th",[t._v("Variables")]),t._v(" "),a("th",[t._v("Values")]),t._v(" "),a("th",[t._v("Addresses")]),t._v(" "),a("th",[t._v("Objects")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("obj")]),t._v(" "),a("td",[t._v("<#234>")]),t._v(" "),a("td",[t._v("#234")]),t._v(" "),a("td",[t._v("[first: 'reference']")])])])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("obj 안에 저장됐던 주소값 변경됨. 첫번째 객체는 아직 메모리 상에 표기가 됨")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("first"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'reference'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("second"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ref2'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("table",[a("thead",[a("tr",[a("th",[t._v("Variables")]),t._v(" "),a("th",[t._v("Values")]),t._v(" "),a("th",[t._v("Addresses")]),t._v(" "),a("th",[t._v("Objects")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("obj")]),t._v(" "),a("td",[t._v("<#678>")]),t._v(" "),a("td",[t._v("#234")]),t._v(" "),a("td",[t._v("[first: 'reference']")])]),t._v(" "),a("tr",[a("td"),t._v(" "),a("td"),t._v(" "),a("td",[t._v("#678")]),t._v(" "),a("td",[t._v("[second: 'ref2']")])])])]),t._v(" "),a("ul",[a("li",[t._v("객체를 가리키는 참조가 남아있지 않을 때 자바스크립트 엔진은"),a("br"),t._v(" "),a("code",[t._v("가비지 컬렉션(garbage collection)")]),t._v("을 동작시킬 수 있음")]),t._v(" "),a("li",[a("code",[t._v("가비지 컬렉션(garbage collection)")]),t._v(" : 프로그래머가 모든 참조를 날려 객체를 사용하지 못하게 된 뒤 자바스크립트 엔진은 주소로 가 사용되지 않는 객체를 메모리로부터 안전하게 지워버리는 것"),a("br"),t._v("\n(위 코드 같은 경우 객체 {first: 'reference'} 더 이상 접근 불가능하고 가비지 콜렉션 될 수 있음)")])]),t._v(" "),a("h3",{attrs:{id:"와"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#와"}},[t._v("#")]),t._v(" == 와 ===")]),t._v(" "),a("ul",[a("li",[t._v("동등함을 비교하는 연산자 "),a("code",[t._v("==")]),t._v("와  "),a("code",[t._v("===")]),t._v("는 참조 타입 변수의 참조를 체크함")]),t._v(" "),a("li",[t._v("2개의 구분 가능한 객체들이 있고 그 객체들의 프로퍼티가 같은지 알고 싶으면 아래와 같은 방법이 있음\n"),a("ul",[a("li",[t._v("두 객체를 문자열로 변경 후 문자열로 비교 (동등 연산자가 원시타입 비교시에는 값이 같은지만 확인함)")]),t._v(" "),a("li",[t._v("객체를 이용해 재귀적으로 반복 (각각의 프로퍼티가 동일한지 확인)")])])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 동일 연산자로 참조 변수 체크")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" arrRef "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hi'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" arrRef2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arrRef"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arrRef "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" arrRef2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 객체를 문자열로 변경 후 문자열로 비교")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" arr1str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringify")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" arr2str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringify")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr1str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" arr2str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n")])])]),a("h3",{attrs:{id:"함수를-통한-파라미터의-전달"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#함수를-통한-파라미터의-전달"}},[t._v("#")]),t._v(" 함수를 통한 파라미터의 전달")]),t._v(" "),a("ul",[a("li",[t._v("원시 값들을 함수로 전달할 때 함수는 값들을 복사해 파라미터로 전달 (= 연산자를 이용하는 것과 같음)")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" hundred "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" two "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("multiply")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 원시값을 함수로 전달 시 변수 x는 해당 값을 갖게 됨 (값은 =연산자를 써서 할당한 것처럼 복사됨)")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 인자로 넘겨진 hundred변수에는 아무런 영향을 미치지 않음")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" twoHundred "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("multiply")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hundred"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" two"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("table",[a("thead",[a("tr",[a("th",[t._v("Variables")]),t._v(" "),a("th",[t._v("Values")]),t._v(" "),a("th",[t._v("Addresses")]),t._v(" "),a("th",[t._v("Objects")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("hundred")]),t._v(" "),a("td",[t._v("100")]),t._v(" "),a("td",[t._v("#333")]),t._v(" "),a("td",[t._v("function(x, y)...")])]),t._v(" "),a("tr",[a("td",[t._v("two")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td"),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("multiply")]),t._v(" "),a("td",[t._v("<#333>")]),t._v(" "),a("td"),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("x")]),t._v(" "),a("td",[t._v("100")]),t._v(" "),a("td"),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("y")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td"),t._v(" "),a("td")])])]),t._v(" "),a("h3",{attrs:{id:"순수-함수"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#순수-함수"}},[t._v("#")]),t._v(" 순수 함수")]),t._v(" "),a("ul",[a("li",[t._v("함수 중 바깥 스코프에 아무 영향도 미치지 않는 함수")]),t._v(" "),a("li",[t._v("원시 값들만을 파라미터로 이용하고 주변 스코프에서 어떤 함수도 이용하지 않으면 자연스레 순수함수가 됨")]),t._v(" "),a("li",[t._v("안에서 만들어진 모든 변수들은 함수에서 반환이 실행되는 즉시 가비지 콜렉션 처리 됨")]),t._v(" "),a("li",[t._v("객체 받는 함수는 주변 스코프들의 상태를 변화시킬 수 있음\n"),a("ul",[a("li",[t._v("배열 참조값을 가진 변수를 함수가 받고 해당 변수가 가리키는 배열에 push 수행 시 주변 스코프에 존재하는 변수들과 참조와 배열이 변하는 현상이 일어남")]),t._v(" "),a("li",[t._v("함수 리턴 후에 변화된 것들은 바깥 스코프에 여전히 남아있음")]),t._v(" "),a("li",[t._v("이런 현상은 side-effect를 줄 수 있음 (디버깅도 어려움)")])])]),t._v(" "),a("li",[a("code",[t._v("Array.map()")]),t._v(", "),a("code",[t._v("Array.filter")]),t._v(" 같은 많은 네이티브 배열 함수들은 순수 함수로 작성되어 있음"),a("br"),t._v("\n(배열 참조를 받아 내부적으로 배열 복사하고 원본 대신 복사된 배열로 작업 => 원본을 건드리지 않고 바깥 스코프에 영향 주지 않고 새로운 배열의 참조를 반환함)")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 비순수 함수")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("changeAgeImpure")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("25")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//leo 객체를 직접적으로 변화시킴")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//받았던 객체 그대로 반환")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// person 변수를 반환하고 그 참조를 다시 새로운 변수에 저장하는 건 사실 쓸모없는 일")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" leo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'leo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  age"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" changeLeo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("changeAgeImpure")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("leo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//leo와 changeLeo는 같은 참조를 가짐")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("leo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//{name:'leo', age:25}")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("changeLeo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//{name:'leo', age:25}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 순수 함수")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("changeAgePure")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" newPerson "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringify")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 넘겨받은 객체를 문자열로 변화시키기 위해 JSON.stringify 함수 사용 ")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => JSON.parse 함수를 이용해 다시 객체로 만듬 ")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 새로운 객체 생성하고 새로운 변수에 저장")]),t._v("\n  \n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 원본 객체의 프로퍼티를 반복해 새로운 객체에 할당하는 방법도 있음")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 새로운 객체는 원본과 같은 프로퍼티들을 가지지만 메모리 상에서 두 객체는 다른 주소값을 가지고 구분됨")]),t._v("\n  newPerson"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("25")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" newPerson"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 새롭게 만들어진 객체 반환")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" leo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'leo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  age"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 프로퍼티를 변경해도 원본에 영향을 주지 않음. (바깥 스코프에 영향 미치지 않음. 인자로 받은 객체까지)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" changeLeo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("changeAgePure")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("leo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 새롭게 만들어진 객체 반환해서 새로운 변수에 저장되어야 함. ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 그렇지 않으면 결과값은 가비지 콜렉션 되고 객체는 어디에도 남지 않게 됨")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("leo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//{name:'leo', age:20}")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("changeLeo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//{name:'leo', age:25}")]),t._v("\n")])])]),a("h3",{attrs:{id:"자가-테스트"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#자가-테스트"}},[t._v("#")]),t._v(" 자가 테스트")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("changeAgeAndReference")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("25")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//넘겨진 원본객체 age 변경")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//person을 새로운 객체로 재할당 (새로운 참조를 갖게 되어 원본 객체에 더 이상 영향 미치지 않음)")]),t._v("\n  person "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n    name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'John'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    age"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" personObj1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Alex'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  age"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" personObj2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("changeAgeAndReference")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("personObj1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("personObj1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -> {name: 'Alex', age:25}")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("personObj2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -> {name: 'John', age:50}")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);