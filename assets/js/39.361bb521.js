(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{400:function(_,v,a){"use strict";a.r(v);var s=a(44),t=Object(s.a)({},(function(){var _=this,v=_.$createElement,a=_._self._c||v;return a("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[a("h1",{attrs:{id:"_04장-변수"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_04장-변수"}},[_._v("#")]),_._v(" 04장. 변수")]),_._v(" "),a("h2",{attrs:{id:"_1-변수란-무엇인가-왜-필요한가"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-변수란-무엇인가-왜-필요한가"}},[_._v("#")]),_._v(" 1. 변수란 무엇인가? 왜 필요한가?")]),_._v(" "),a("p",[_._v("애플리케이션은 데이터를 입력받아 처리하고, 그 결과를 출력함."),a("br"),_._v("\n변수 : 프로그래밍 언어에서 데이터를 관리하기 위한 핵심 개념.")]),_._v(" "),a("p",[_._v("컴퓨터는 CPU를 통해 연산하고 메모리를 사용해 데이터를 기억함")]),_._v(" "),a("p",[_._v("메모리 : 데이터를 저장할 수 있는 메모리 셀의 집합체.")]),_._v(" "),a("ul",[a("li",[_._v("메모리 셀 하나의 크기는 1바이트 (8비트),"),a("br"),_._v("\n컴퓨터는 메모리 셀의 크기로 데이터를 저장하거나 읽어들임.")]),_._v(" "),a("li",[_._v("각 셀은 메모리 주소(메모리 공간의 위치 : 0부터 시작해서 메모리 크기만큼의 정수로 표현)를 가짐")]),_._v(" "),a("li",[_._v("메모리에 저장되는 데이터는 모두 2진수로 저장됨")]),_._v(" "),a("li",[_._v("데이터는 메모리 임의의 위치(메모리 주소)에 기억(저장)되며, CPU는 이 값을 읽어들여 연산 수행함.")])]),_._v(" "),a("p",[_._v("메모리 주소를 통해 직접 값에 접근하는 것은 치명적인 오류를 발생시킬 가능성 매우 높음"),a("br"),_._v("\n(실수로 운영체제가 사용하고 있는 값을 변경 -> 시스템을 멈추게 하는 치명적인 오류 발생)"),a("br"),_._v("\n따라 자바스크립트는 개발자의 직접적인 메모리 제어를 허용하지 않음")]),_._v(" "),a("p",[_._v("만약 자바스크립트가 직접적인 메모리 제어를 허용해도"),a("br"),_._v("\n메모리 주소는 코드가 실행될 때 메모리의 상황에 따라 임의로 결정되기 때문에"),a("br"),_._v("\n동일한 컴퓨터에서 동일한 코드를 실행해도 코드 실행 시마다 값이 저장될 메모리 주소는 변경됨"),a("br"),_._v("\n따라 메모리 주소를 통해 값에 직접 접근하려는 시도는 올바른 방법이 아님.")]),_._v(" "),a("p",[_._v("->")]),_._v(" "),a("p",[_._v("때문에 프로그래밍언어는 기억하고 싶은 값을 메모리에 저장하고,"),a("br"),_._v("\n저장된 값을 읽어 들여 재사용하기 위해 변수라는 메커니즘을 제공")]),_._v(" "),a("p",[a("strong",[_._v('"변수는 하나의 값을 저장하기 위해 확보한 메모리 공간 자체'),a("br"),_._v('\n또는 그 메모리 공간을 식별하기 위해 붙인 이름을 말한다."')])]),_._v(" "),a("p",[_._v("간단히 말하자면 변수는"),a("br"),_._v("\n프로그래밍 언어에서 값을 저장하고 참조하는 메커니즘이며 값의 위치를 가리키는 상징적인 이름")]),_._v(" "),a("p",[_._v("변수는 컴파일러 또는 인터프리터에 의해 값이 저장된 메모리 공간의 주소로 치환되어 실행됨."),a("br"),_._v("\n따라 개발자가 직접 메모리 주소를 통해 값을 저장하고 참조할 필요가 없고 변수를 통해 안전하게 값이 접근 가능")]),_._v(" "),a("blockquote",[a("p",[_._v("<변수에 여러 개의 값을 저장하는 방법>"),a("br"),_._v("\n변수는 하나의 값을 저장하기 위한 메커니즘. 따라 여러 개의 값을 저장하려면 여러 개의 변수 사용."),a("br"),_._v("\n단 배열이나 객체 같은 자료구조를 사용하면 관련있는 여러 개의 값을 그룹화해 하나의 값처럼 사용 가능")])]),_._v(" "),a("p",[_._v("변수 이름 : 메모리 공간에 저장된 값을 식별할 수 있는 고유한 이름"),a("br"),_._v("\n변수 값 : 변수에 저장된 값"),a("br"),_._v("\n할당 : 변수에 값을 저장하는 것 (대입, 저장)"),a("br"),_._v("\n참조 : 변수에 저장된 값을 읽어 들이는 것")]),_._v(" "),a("p",[_._v("변수 이름을 사용해 참조 요청 시 자바스크립트 엔진은 변수 이름과 매핑된 메모리 주소를 통해"),a("br"),_._v("\n메모리 공간에 접근해서 저장된 값을 반환함")]),_._v(" "),a("h2",{attrs:{id:"_2-식별자"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-식별자"}},[_._v("#")]),_._v(" 2. 식별자")]),_._v(" "),a("p",[_._v("식별자 : 어떤 값을 구별해 식별할 수 있는 고유한 이름")]),_._v(" "),a("ul",[a("li",[_._v("식별자는 값이 아니라 메모리 주소를 기억 (식별자 = 메모리 주소에 붙인 이름)"),a("br"),_._v("\nex) 식별자 result는 값 30이 저장되어 있는 메모리 주소를 기억해야 함")]),_._v(" "),a("li",[_._v('메모리 상에 존재하는 "값을 식별할 수 있는 이름"은 모두 식별자.'),a("br"),_._v("\nex) 변수, 함수, 클래스 등의 이름")]),_._v(" "),a("li",[_._v("식별자는 네이밍 규칙을 준수해야 하며,"),a("br"),_._v("\n선언에 의해 자바스크립트 엔진에 식별자의 존재를 알림")])]),_._v(" "),a("h2",{attrs:{id:"_3-변수-선언"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-변수-선언"}},[_._v("#")]),_._v(" 3. 변수 선언")]),_._v(" "),a("p",[_._v("값을 저장하기 위해 메모리 공간을 확보하고, 변수명과 확보된 메모리 공간의 주소를 연결해 준비하는 것"),a("br"),_._v("\n이렇게 확보된 메모리 공간은 확보 해제 전까지 다른 곳에서 사용할 수 없게 보호되므로 안전하게 사용 가능")]),_._v(" "),a("p",[_._v("변수는 사용 전 반드시 var, let, const 키워드로 선언 필요."),a("br"),_._v("\n선언하지 않은 식별자에 접근하면 ReferenceError(참조 에러) 발생.")]),_._v(" "),a("blockquote",[a("p",[_._v("var 키워드는 블록 레벨 스코프를 지원하지 않고 함수 레벨 스코프를 지원"),a("br"),_._v("\n-> 의도치 않게 전역 변수 선언되어 부작용 발생"),a("br"),_._v("\n위와 같은 단점 때문에 ES6에서 let, const 키워드 도입")])]),_._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("var")]),_._v(" score"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[_._v("//변수 선언문")]),_._v("\n")])])]),a("p",[_._v("자바스크립트 엔진은 변수 선언을 2단계에 거쳐 수행함")]),_._v(" "),a("ul",[a("li",[_._v("선언 단계 : 변수 이름 등록해 자바스크립트 엔진에 변수의 존재 알림")]),_._v(" "),a("li",[_._v("초기화 단계 : 값 저장을 위한 메모리 공간 확보. 값 할당하지 않아도 암묵적으로 undefined 할당해 초기화 함")])]),_._v(" "),a("p",[_._v("var 키워드를 사용한 변수 선언은 선언 단계와 초기화 단계가 동시에 진행됨."),a("br"),_._v("\n초기화 단계를 거치지 않고 메모리 공간 확보한 뒤 값을 할당하지 않은 상태에서 바로 변수 값을 참조하면"),a("br"),_._v("\n쓰레기 값(이전에 다른곳에서 사용했던 값)이 나올 수 있음"),a("br"),_._v("\nvar 키워드는 암묵적으로 초기화를 수행하므로 이런 위험으로부터 안전함")]),_._v(" "),a("blockquote",[a("p",[_._v("모든 식별자는 실행 컨텍스트에 등록됨."),a("br"),_._v("\n실행 컨텍스트 : 자바스크립트 엔진이 소스코드를 평가하고 실행하기 위해 필요한 환경을 제공하고"),a("br"),_._v("\n코드 실행 결과를 관리하는 영역"),a("br"),_._v("\n자바스크립트 엔진은 실행 컨텍스트를 통해 식별자와 스코프를 관리함"),a("br"),_._v("\n(변수 이름과 변수 값은 키/값의 객체 형태로 등록되어 관리됨)")])]),_._v(" "),a("h2",{attrs:{id:"_4-변수-선언의-실행-시점과-변수-호이스팅"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-변수-선언의-실행-시점과-변수-호이스팅"}},[_._v("#")]),_._v(" 4. 변수 선언의 실행 시점과 변수 호이스팅")]),_._v(" "),a("p",[_._v("변수 호이스팅 : 변수 선언문이 코드의 선두로 끌어 올려진 것처럼 동작하는 JS 고유의 특징")]),_._v(" "),a("p",[_._v("사실 모든 선언문은 런타임 이전 단계에서 먼저 실행되기 때문에"),a("br"),_._v("\nvar, let, const, function, function*, class 키워드로 선언한 모든 식별자는 호이스팅 됨")]),_._v(" "),a("ol",[a("li",[_._v("자바스크립트 엔진은 코드 실행하기에 앞서 먼저 소스코드의 평가 과정을 거치며 소스코드 실행 준비를 함")]),_._v(" "),a("li",[_._v("이때 준비 단계인 소스코드의 평가 과정에서 모든 선언문(변수 선언문, 함수 선언문 등)을"),a("br"),_._v("\n소스코드에서 찾아내 먼저 실행함.")]),_._v(" "),a("li",[_._v("소스코드의 평가 과정이 끝나면 모든 선언문을 제외한 소스코드를 한 줄씩 순차적으로 실행함")]),_._v(" "),a("li",[_._v("때문에 자바스크립트 엔진은 위치와 상관없이 다른 코드들보다 변수 선언을 먼저 실행함")])]),_._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[_._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[_._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("(")]),_._v("score"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[_._v("//참조 에러가 아니라 undefined 출력")]),_._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("var")]),_._v(" score"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[_._v("//변수 선언")]),_._v("\n")])])]),a("h2",{attrs:{id:"_5-값의-할당"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-값의-할당"}},[_._v("#")]),_._v(" 5. 값의 할당")]),_._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("var")]),_._v(" score"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[_._v("//변수 선언")]),_._v("\nscore "),a("span",{pre:!0,attrs:{class:"token operator"}},[_._v("=")]),_._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[_._v("80")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[_._v("//값 할당")]),_._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("var")]),_._v(" score "),a("span",{pre:!0,attrs:{class:"token operator"}},[_._v("=")]),_._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[_._v("80")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[_._v("//변수 선언과 값 할당")]),_._v("\n")])])]),a("p",[_._v("자바스크립트 엔진은 변수 선언과 값 할당을 하나의 문으로 단축 표현해도"),a("br"),_._v("\n변수 선언과 값 할당 2개의 문으로 나눠 각각 실행함")]),_._v(" "),a("p",[_._v("주의해야 하는 부분은 변수 선언과 값 할당 실행 시점이 다르다는 것."),a("br"),_._v("\n변수 선언 : 소스코드가 순차적으로 실행되는 시점인 런타임 이전에 먼저 실행"),a("br"),_._v("\n값의 할당 : 런타임에 실행")]),_._v(" "),a("p",[_._v("또한 변수에 값 할당 시에는 이전 값이 저장되어 있던 메모리 공간에 새로운 값을 저장하는게 아니라"),a("br"),_._v("\n새로운 메모리 공간을 확보하고 그곳에 새로운 값을 저장한다는 것에 주의해야 함")]),_._v(" "),a("h2",{attrs:{id:"_6-값의-재할당"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-값의-재할당"}},[_._v("#")]),_._v(" 6. 값의 재할당")]),_._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("var")]),_._v(" score "),a("span",{pre:!0,attrs:{class:"token operator"}},[_._v("=")]),_._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[_._v("80")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[_._v("// 변수 선언과 값 할당")]),_._v("\nscore "),a("span",{pre:!0,attrs:{class:"token operator"}},[_._v("=")]),_._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[_._v("90")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[_._v("// 값의 재할당")]),_._v("\n")])])]),a("p",[_._v("var 키워드로 선언한 변수는 값 재할당 가능."),a("br"),_._v("\nvar 변수는 선언과 동시에 undefined로 초기화되기 때문에 사실 변수에 처음 값을 할당하는 것도 재할당.")]),_._v(" "),a("p",[_._v("값을 재할당할 수 없어서 변수에 저장된 값을 변경할 수 없다면 그건 변수가 아니라 상수."),a("br"),_._v("\n(상수 = 단 한번만 할당 가능한 변수 ex. const)")]),_._v(" "),a("p",[_._v("값 할당 때와 마찬가지로 변수에 값 재할당 시 새로운 메모리 공간을 확보하고 그곳에 새로운 값을 저장함."),a("br"),_._v("\n->"),a("br"),_._v("\n이전 값들이 저장되어있는 메모리 공간은 더 이상 아무도 사용하지 않고 불필요함."),a("br"),_._v("\n이런 불필요한 값들은 가비지 콜렉터에 의해 메모리에서 자동 해제됨. 단, 언제 해제될지는 예측 불가능")]),_._v(" "),a("h3",{attrs:{id:"가비지-콜렉트"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#가비지-콜렉트"}},[_._v("#")]),_._v(" 가비지 콜렉트")]),_._v(" "),a("ul",[a("li",[_._v("어플리케이션이 할당한 메모리 공간을 주기적으로 검사해 사용되지 않는 메모리 공간을 해제하는 기능")]),_._v(" "),a("li",[_._v("(더 이상 사용되지 않는 메모리 = 어떤 식별자도 참조하지 않는 메모리 공간)")]),_._v(" "),a("li",[_._v("JS는 가비지 콜렉터를 내장하고 있는 매니지드 언어로서 가비지 콜렉터를 통해 메모리 누수를 방지함")])]),_._v(" "),a("h3",{attrs:{id:"언매니지드-언어-매니지드-언어"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#언매니지드-언어-매니지드-언어"}},[_._v("#")]),_._v(" 언매니지드 언어 / 매니지드 언어")]),_._v(" "),a("p",[_._v("메모리 관리 방식에 따라 나뉨")]),_._v(" "),a("ul",[a("li",[a("p",[_._v("언메니지드 언어 :"),a("br"),_._v("\n메모리 제어를 개발자가 주도할 수 있음 (ex. C언어)"),a("br"),_._v("\n개발자의 역량에 따라 최적의 성능을 확보하거나 치명적 오류를 생산할 수 있음")])]),_._v(" "),a("li",[a("p",[_._v("매니지드 언어 :"),a("br"),_._v("\n메모리 할당 및 해제를 위한 메모리 관리 기능을 언어 차원에서 담당."),a("br"),_._v("\n개발자의 직접적인 메모리 제어 허용하지 않음 (ex. JS)"),a("br"),_._v("\n일정한 생산성 확보 가능하지만 성능면에서 어느 정도의 손실 감수해야 함")])])]),_._v(" "),a("h2",{attrs:{id:"_7-식별자-네이밍-규칙"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-식별자-네이밍-규칙"}},[_._v("#")]),_._v(" 7. 식별자 네이밍 규칙")]),_._v(" "),a("h3",{attrs:{id:"네이밍-규칙"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#네이밍-규칙"}},[_._v("#")]),_._v(" 네이밍 규칙")]),_._v(" "),a("ul",[a("li",[_._v("특수문자를 제외한 문자, 숫자, 언더스코어(_), 달러 기호($) 포함 가능")]),_._v(" "),a("li",[_._v("단, 숫자로 시작하는 것은 허용하지 않음")]),_._v(" "),a("li",[_._v("예약어(프로그래밍 언어에서 사용하고 있거나 사용할 예정인 단어)는 식별자로 사용 불가능")])]),_._v(" "),a("hr"),_._v(" "),a("ul",[a("li",[_._v("쉼표(,)로 구분해 하나의 문에서 여러 개의 변수를 한번에 선언할 수 있지만 가독성이 나쁘므로 권장하지 않음")]),_._v(" "),a("li",[_._v("ES5부터 유니코드 문자를 허용하므로 알파벳 외의 문자도 가능하지만 권장하지 않음")]),_._v(" "),a("li",[_._v("대소문자 구별함")]),_._v(" "),a("li",[_._v("존재 목적을 알기 쉽게 의미를 명확히 표현해야 함")])]),_._v(" "),a("h3",{attrs:{id:"네이밍-컨벤션"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#네이밍-컨벤션"}},[_._v("#")]),_._v(" 네이밍 컨벤션")]),_._v(" "),a("p",[_._v("가독성 좋게 단어를 한눈에 구분하기 위해 규정한 명명 규칙")]),_._v(" "),a("ul",[a("li",[_._v("카멜 케이스 (camelCase)")]),_._v(" "),a("li",[_._v("스네이크 케이스 (snake_case)")]),_._v(" "),a("li",[_._v("파스칼 케이스 (PascalCase)")]),_._v(" "),a("li",[_._v("헝가리언 케이스 (type + identifier)")])]),_._v(" "),a("p",[_._v("일반적으로 변수 / 함수 이름에는 카멜 케이스,"),a("br"),_._v("\n생성자 함수 / 클래스 이름에는 파스칼 케이스 사용")])])}),[],!1,null,null,null);v.default=t.exports}}]);