(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{407:function(t,a,s){"use strict";s.r(a);var n=s(44),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"_05장-표현식과-문"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_05장-표현식과-문"}},[t._v("#")]),t._v(" 05장. 표현식과 문")]),t._v(" "),s("h2",{attrs:{id:"_1-값"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-값"}},[t._v("#")]),t._v(" 1. 값")]),t._v(" "),s("ul",[s("li",[t._v("식(표현식)이 평가(식을 해석해서 값을 생성하거나 참조하는 것)되어 생성된 결과")]),t._v(" "),s("li",[t._v("모든 값은 데이터 타입을 가지며 메모리에 2진수(비트)의 나열로 저장됨"),s("br"),t._v("\n메모리에 저장된 값은 데이터 타입에 따라 다르게 해석될 수 있음"),s("br"),t._v("\n(값 0100 0001 -> 숫자 : 65, 문자 : A)")]),t._v(" "),s("li",[t._v("값은 다양한 방법으로 생성할 수 있음."),s("br"),t._v("\n식으로 생성할 수도 있지만 가장 기본적인 방법은 리터럴을 사용하는 것")])]),t._v(" "),s("h2",{attrs:{id:"_2-리터럴"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-리터럴"}},[t._v("#")]),t._v(" 2. 리터럴")]),t._v(" "),s("ul",[s("li",[t._v("사람이 이해할 수 있는 문자(아라비아 숫자, 알파벳, 한글 등) 또는 약속된 기호(특수문자 등)를 사용해"),s("br"),t._v("\n값을 생성하는 표기법 (= 값을 생성하기 위해 미리 약속한 표기법)")]),t._v(" "),s("li",[t._v("자바스크립트 엔진은 코드가 실행되는 시점인 런타임에 리터럴을 평가해 값을 생성함")]),t._v(" "),s("li",[t._v("리터럴을 사용하면 다양한 종류의 값을 생성할 수 있음")])]),t._v(" "),s("hr"),t._v(" "),s("ul",[s("li",[t._v("정수 리터럴(100), 부동 소수점 리터럴(10.5)")]),t._v(" "),s("li",[t._v("2진수 리터럴(0b로 시작), 8진수 리터럴(0o로 시작. ES6 도입), 16진수 리터럴(0x로 시작. ES6 도입)")]),t._v(" "),s("li",[t._v("문자열 리터럴 ('Hello', \"World\")")]),t._v(" "),s("li",[t._v("불리언 리터럴 (true, false)")]),t._v(" "),s("li",[t._v("null 리터럴, undefined 리터럴")]),t._v(" "),s("li",[t._v("객체 리터럴 ({name: 'leo', address: 'Seoul'})")]),t._v(" "),s("li",[t._v("배열 리터럴 ([1,2,3])")]),t._v(" "),s("li",[t._v("함수 리터럴 (function(){})")]),t._v(" "),s("li",[t._v("정규 표현식 리터럴 (/[A-Z]+/g)")])]),t._v(" "),s("h2",{attrs:{id:"_3-표현식"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-표현식"}},[t._v("#")]),t._v(" 3. 표현식")]),t._v(" "),s("ul",[s("li",[t._v("값으로 평가될 수 있는 문.")]),t._v(" "),s("li",[t._v("표현식이 평가되면 새로운 값을 생성하거나 기존 값을 참조함")]),t._v(" "),s("li",[t._v("표현식은 리터럴, 식별자, 연산자, 함수 호출  등의 조합으로 이뤄질 수 있음")]),t._v(" "),s("li",[t._v("값으로 평가될 수 있는 문은 모두 표현식"),s("br"),t._v("\n리터럴 100은 자바스크립트 엔진에 의해 평가되어 값을 생성함 = 리터럴 자체로 표현식"),s("br"),t._v("\n변수 식별자를 참조하면 변수 값으로 평가됨 = 표현식")]),t._v(" "),s("li",[t._v("표현식은 값처럼 사용할 수 있으며, 다른 표현식의 일부가 될 수 있음")])]),t._v(" "),s("h2",{attrs:{id:"_4-문"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-문"}},[t._v("#")]),t._v(" 4. 문")]),t._v(" "),s("ul",[s("li",[t._v("프로그램을 구성하는 기본 단위이자 최소 실행 단위")]),t._v(" "),s("li",[t._v("문의 집합으로 이루어진 것 = 프로그램."),s("br"),t._v("\n문을 작성하고 순서에 맞게 나열하는 것 = 프로그래밍")]),t._v(" "),s("li",[t._v("문은 여러 토큰으로 구성됨"),s("br"),t._v("\n토큰 : 문법적인 의미를 가지며, 문법적으로 더 이상 나눌 수 없는 코드의 기본 요소"),s("br"),t._v("\nex) 키워드, 식별자, 연산자, 리터럴, 특수기호 등")]),t._v(" "),s("li",[t._v("명령문이라고도 부름 (문 = 컴퓨터에게 내리는 명령)")]),t._v(" "),s("li",[t._v("선언문, 할당문, 조건문, 반복문 등으로 구분할 수 있음")])]),t._v(" "),s("h2",{attrs:{id:"_5-세미콜론과-세미콜론-자동-삽입-기능"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-세미콜론과-세미콜론-자동-삽입-기능"}},[t._v("#")]),t._v(" 5. 세미콜론과 세미콜론 자동 삽입 기능")]),t._v(" "),s("p",[t._v("자바스크립트 엔진은 세미콜론으로 문이 종료한 위치를 파악하고 순차적으로 하나씩 문을 실행함"),s("br"),t._v("\n따라서 문을 끝낼 때는 세미콜론을 붙여야 함"),s("br"),t._v("\n(세미콜론 ; = 문의 종료)")]),t._v(" "),s("p",[t._v("단, 0개 이상의 문을 중괄호로 묶은 코드 블록 뒤에는 세미콜론을 붙이지 않음"),s("br"),t._v("\n언제나 문의 종료를 의미하는 자체 종결성을 갖기 떄문."),s("br"),t._v("\n(ex. if문, for문, 함수 등의 코드 블록)")]),t._v(" "),s("p",[t._v("자바스크립트 엔진이 소스코드 해석 시 문의 끝이라고 예측되는 지점에 세미콜론을 자동으로 붙여주는"),s("br"),t._v("\n세미콜론 자동 삽입 기능(ASI)이 암묵적으로 수행되어 세미콜론은 생략 가능하지만 쓰는 것을 권장함.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//개발자 의도 => return ();")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//ASI 동작 결과 => return; {};")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//undefined")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("bar")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//개발자 의도 => var bar = function(){}; (function(){})();")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//ASI 동작 결과 => var bar = function(){}(functino(){})();")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//TypeError: (intermediate value)(...) is not a function")]),t._v("\n")])])]),s("h2",{attrs:{id:"_6-표현식인-문과-표현식이-아닌-문"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-표현식인-문과-표현식이-아닌-문"}},[t._v("#")]),t._v(" 6. 표현식인 문과 표현식이 아닌 문")]),t._v(" "),s("p",[t._v("표현식은 문의 일부일 수도 있고 그 자체로 문일 수도 있음")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 변수 선언문은 값으로 평가될 수 없으므로 표현식 X")]),t._v("\nx "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1, 2, 1+2, x=1+2 모두 표현식. x=1+2는 표현식이면서 완전한 문이기도 함")]),t._v("\n")])])]),s("p",[t._v("표현식인 문은 값으로 평가될 수 있는 문이며, 표현식이 아닌 문은 값으로 평가될 수 없는 문."),s("br"),t._v("\n둘을 구별하는 가장 간단한 방법은 변수에 할당해 보는 것. (var foo = var x; //Error)"),s("br"),t._v("\n표현식인 문은 값처럼 사용할 수 있기 때문")]),t._v(" "),s("blockquote",[s("p",[t._v("크롬 개발자 도구에서 표현식인 문을 실행하면 평가된 값을 반환하고,"),s("br"),t._v("\n표현식이 아닌 문을 실행하면 언제나 undefined를 출력함 (이를 완료 값이라고 함)"),s("br"),t._v("\n완료 값은 표현식의 평가 결과가 아니라 다른 값처럼 변수에 할당할 수 없고 참조할 수도 없음")])])])}),[],!1,null,null,null);a.default=r.exports}}]);