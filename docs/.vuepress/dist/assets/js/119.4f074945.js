(window.webpackJsonp=window.webpackJsonp||[]).push([[119],{544:function(t,e,r){"use strict";r.r(e);var a=r(65),o=Object(a.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"아토믹-atomic-디자인-패턴"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#아토믹-atomic-디자인-패턴"}},[t._v("#")]),t._v(" 아토믹(Atomic) 디자인 패턴")]),t._v(" "),r("p",[t._v("초기에 react 프로젝트를 시작할 때 우아한형제들 기술 블로그에서\n"),r("a",{attrs:{href:"https://techblog.woowahan.com/2599/",target:"_blank",rel:"noopener noreferrer"}},[t._v("React에서 Mobx 경험기"),r("OutboundLink")],1),t._v(" 라는 글을 읽고 해당 글을 베이스로 작업을 시작했다."),r("br"),t._v("\n처음 사용하는 라이브러리나 프레임워크 같은 경우에는 프로젝트 구조를 어떻게 나눠야 하는지 몰라서 삽질을 많이 하는데 위 글에 많은 도움을 받았다."),r("br"),t._v("\n해당 글에서는 효율적인 Directory 구조를 위해 atomic design 이라는 UI design 개념을 사용해\n컴포넌트들을 작업하고 관리했는데 직접 사용해보니 효율적이라 정리 할 겸 기록한다.")]),t._v(" "),r("br"),t._v(" "),r("h2",{attrs:{id:"atomic-디자인-패턴이란"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#atomic-디자인-패턴이란"}},[t._v("#")]),t._v(" Atomic 디자인 패턴이란?")]),t._v(" "),r("p",[t._v("가장 작은 컴포넌트 단위를 베이스로 상위 컴포넌트를 만들어 코드 재사용을 최대화하는 방식."),r("br"),t._v("\n대형 변화에 최적화되어 있으며 효율성이 극대화될 수 있음.")]),t._v(" "),r("ul",[r("li",[t._v("Atoms (원자) : 가장 작은 컴포넌트 단위. 하나의 구성요소이며 더 이상 분해될 수 없음 (tag) (ex. button, input 등)")]),t._v(" "),r("li",[t._v("Molecules (분자) : 원자들이 결합되어 하나의 단위로 함께 동작하는 그룹 (ex. input forms, card, icon + button)")]),t._v(" "),r("li",[t._v("Organisms (유기체) : 분자들이 모여있는 특정 영역 (ex. header, 여러 카드 관리하는 그리드 등)")]),t._v(" "),r("li",[t._v("Templates (템플릿) : 여러 유기체가 모여있고 페이지보다 낮은 단위. 화면을 구성하는 영역")]),t._v(" "),r("li",[t._v("Pages (페이지) : 데이터를 가지고 화면 구성을 위해 필요한 단위들이 page 단위로 모여있는 것")])]),t._v(" "),r("br"),t._v(" "),r("h2",{attrs:{id:"파일구조"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#파일구조"}},[t._v("#")]),t._v(" 파일구조")]),t._v(" "),r("ul",[r("li",[t._v("common > components > atoms, molecules, organisms")]),t._v(" "),r("li",[t._v("pages > 페이지별 폴더 > templates")])]),t._v(" "),r("p",[t._v("실제로 사용해보니 Atoms에 해당하는 컴포넌트들만 잘 작성해도 조립만 하면 편리하게 사용할 수 있기 때문에 효율적이었다.\n프로젝트와 분리해 컴포넌트를 개발하고 테스트할 수 있어 깔끔한 작업이 가능하며, style이 해당 컴포넌트에 연결되있기 때문에 관리하기가 편하다.")]),t._v(" "),r("h2",{attrs:{id:"atomic-디자인-패턴의-단점"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#atomic-디자인-패턴의-단점"}},[t._v("#")]),t._v(" Atomic 디자인 패턴의 단점")]),t._v(" "),r("ul",[r("li",[t._v("컴포넌트 간 의존성과 복잡도가 까다로울 수 있음")]),t._v(" "),r("li",[t._v("의존성이 상하로 발생하기 때문에 하위컴포넌트의 에러가 상위컴포넌트에도 영향을 미침")]),t._v(" "),r("li",[t._v("변화가 누적되면서 각각을 구성하는 컴포넌트가 많아질 때는 너무 복잡해짐")])]),t._v(" "),r("br"),t._v(" "),r("br"),t._v(" "),r("br"),t._v(" "),r("blockquote",[r("h3",{attrs:{id:"reference"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#reference"}},[t._v("#")]),t._v(" Reference")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://techblog.woowahan.com/2599/",target:"_blank",rel:"noopener noreferrer"}},[t._v("React에서 Mobx 경험기 (Redux와 비교기)"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://brunch.co.kr/@skykamja24/580",target:"_blank",rel:"noopener noreferrer"}},[t._v("아토믹(Atomic) 컴포넌트 디자인 개발 패턴"),r("OutboundLink")],1)])])])])}),[],!1,null,null,null);e.default=o.exports}}]);