# TCP/IP 프로토콜 스위트  
2023.12.10  
---  


## 3. TCP/IP 통신 과정

### 3-1. TCP/IP의 데이터 송수신 과정

- 데이터 송신 :
    - 송신자는 데이터를 응용 계층에서 전달받아 분할해 패킷으로 만듬
    - 이 패킷은 상위 계층에서 하위 계층으로 전달되면서 각 계층에서 헤더 정보가 추가됨
- 패킷 송신 :
    - 패킷은 네트워크 액세스 계층을 거쳐 네트워크 매체로 전송됨
- 패킷 수신 :
    - 패킷은 수신자의 네트워크 액세스 계층에서 받아들여 상위 계층으로 전달됨
    - 각 계층에서 헤더 정보가 제거되고 패킷은 원래의 데이터로 조립됨

### 3-2. 데이터 송수신 과정

1. 클라이언트의 요청
    
    클라이언트 애플리케이션이 서버에 요청을 보내기 위해 특정 프로토콜을 사용함
    ex. 웹 브라우저는 HTTP 프로토콜을 사용해 웹 페이지 요청을 생성함
    
2. 응용 계층
    
    클라이언트의 요청은 응용 계층에서 생성됨.
    이때 사용되는 프로토콜은 요청의 종류에 따라 다양함 (HTTP, FTP, SMTP 등)
    
3. 전송 계층
    
    응용 계층에서 생성된 데이터는 전송 계층으로 전달됨
    전송 계층은 데이터의 신뢰성과 효율성을 제공함
    가장 일반적으로 사용되는 프로토콜은 TCP.
    클라이언트는 요청을 TCP 세그먼트로 분할하고, 각 세그먼트에 일련 번호를 할당해 서버로 전송함
    
4. 인터넷 계층
    
    TCP 세그먼트는 인터넷 계층으로 전달됨.
    인터넷 계층에서는 각 세그먼트에 출발지 및 목적지 IP 주소가 추가되고, 라우팅을 위해 패킷이 다음 노드로 전달됨
    
5. 네트워크 액세스 계층
    
    인터넷 계층에서 패킷은 네트워크 액세스 계층으로 전달됨.
    네트워크 액세스 계층은 물리적인 네트워크 인터페이스와 관련된 작업을 처리하며, 패킷을 실제로 전송함
    이 계층에서는 이더넷, Wi-Fi, DSL 등 같은 특정 네트워크 기술이 사용됨
    
6. 서버의 응답
    
    서버는 클라이언트의 요청을 받아들이고 처리한 후 응답을 생성함
    응답은 위의 과정을 역순으로 따라감
    

### 3-3. TCP의 연결 설정과 해제

TCP는 신뢰성 있는 연결 지향적인 프로토콜로, 데이터의 안정적인 전달을 보장하기 위해 연결 설정과 해제 단계를 거침

- **3-way handshake (연결 설정)**
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/583bd6a3-b2d4-4652-b0f1-1244dfc152bb/Untitled.png)
    
    - TCP/IP 프로토콜을 이용해 통신을 하는 응용 프로그램이 데이터를 전송하기 전에 
    먼저 정확한 전송을 보장하기 위해 상대방 컴퓨터와 사전에 세션을 수립하는 과정
    - 3way handshake는 양쪽 모두 데이터를 전송할 준비가 되었다는 것을 보장하고, 
    실제로 데이터 전달이 시작하기 전에 다른 한쪽이 준비되었다는 것을 알 수 있도록 해줌
    - 아래처럼 신뢰성을 위해 3번의 핸드쉐이킹을 거쳐 연결을 맺는 것을 뜻함
    - 동작 순서
        1. Client → SYN → Server
            
            Client가 Server에게 접속을 요청하는 SYN 플래그를 보냄
            
        2. Server → SYN + ACK → Client
            
            Server는 Listen 상태에서 SYN이 들어온 것을 확인하고 SYN_RECV 상태로 바뀌어 SYN + ACK 플래그를 Client에게 전송함. 그 후 Server는 다시 ACK 플래그를 받기 위해 대기 상태로 변경됨
            
        3. Client → ACK → Server
            
            SYN + ACK 상태를 확인한 Client는 서버에게 ACK를 보내고 연결 성립이 됨
            
    - State
        - CLOSED : 포트가 닫힌 상태
        - LISTEN : 포트가 열린 상태로 연결 요청 대기 중
        - SYN_RECV : SYNC 요청을 받고 상대방의 응답을 기다리는 중
        - ESTABLESHED : 포트 연결 샅애
        - TIME_WAIT : 서버로부터 FIN을 수신하더라도 일정시간동안(default:240초) 세션을 남겨놓고 잉여 패킷을 기다리는 과정
    - Flag
        - TCP Header에는 CONTROL BIT(플래그 비트. 6bit)가 존재하며, 
        각각의 비트는 ‘URG-ACK-PSH-RST-SYN-FIN’의 의미를 가짐
        - SYN(Synchronize Sequence Number)
            
            Sequence Number를 랜덤으로 설정해 세션을 연결하는데 사용하며,
            초기에 Sequence Number를 전송함.
            즉, Connection을 생성할 때 사용하는 flag
            
        - ACK(Acknowledgement)
            
            응답 확인. 패킷을 받았다는 것을 의미.
            Acknowledgement Number 필드가 유효한지 나타냄.
            
        - FIN(Finish)
            
            연결 해제. 세션 연결을 종료시킬 때 사용되며 더 이상 전송할 데이터가 없음을 의미함
            4way handshake에서 사용됨
            
- **4-way handshake (연결 해제)**
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/317b06de-952e-4fd3-a4d2-8f429bee4d89/Untitled.png)
    
    - way handshake는 세션을 종료하기 위해 수행되는 절차를 뜻함
    - 동작 순서
        1. Client → FIN → Server
            
            Client가 연결을 종료하겠다는 FIN 플래그를 전송함.
            보낸 후에 FIN-WAIT-1 상태로 변함
            
        2. Server → ACK → Client
            
            FIN 플래그를 받은 Server는 확인메세지인 ACK를 Client에게 보내줌
            그 후 CLOSE_WAIT 상태로 변함.
            Client도 마찬가지로 종료될 준비가 됐다는 FIN을 받기 위해 FIN-WAIT-2 상태가 됨
            
        3. Server → FIN → Clinet
            
            Cloes 준비가 다 된 후 Server는 Client에게 FIN 플래그를 전송함
            
        4. Client → ACK → Server
            
            Client는 해지 준비가 되었다는 정상 응답인 ACK를 Server에게 보내줌.
            이때, Client는 TIME-WAIT 상태로 변경됨
            
            TIME-WAIT 상태 : 
            의도치 않은 에러로 인해 연결이 데드락으로 빠지는 것을 방지하기 위해 변경되는 것.
            만약 에러로 인해 종료가 지연되다가 타임 초과되면 CLOSED 상태로 변경됨
            

---

## 4. 주요 TCP/IP 프로토콜

**IP (Internet Protocol) : 데이터의 전달을 담당하는 프로토콜**

- 패킷 전달 :
    - 데이터를 작은 패킷으로 분할하여 전송함 (각 패킷은 목적지 IP 주소와 출발지 IP 주소를 가지고 있음)
    - 패킷은 네트워크 상에서 독립적으로 전달되며, 도착지에서는 패킷을 조립하여 원래의 데이터로 복구함
- 주소 지정 :
    - IP 주소는 네트워크 상에서 호스트나 네트워크 인터페이스를 고유하게 식별하는 데 사용됨
    - IPv4는 32비트 주소 체계로 표현되며, IPv6는 128비트 주소 체계를 사용
- 라우팅 :
    - 패킷을 목적지까지 안전하게 전달하기 위해 최적의 경로를 선택하는 라우팅 기능을 수행함
    - 라우터는 IP 패킷의 목적지 주소를 확인하고, 다음 라우터로 패킷을 전달함.
    이 과정을 통해 패킷은 목적지까지 전달됨
- 비연결성 :
    
    IP는 연결 설정과 해제 과정이 없이 독립적으로 패킷을 전송함
    각 패킷은 독립적으로 처리되며, 패킷 간의 연관성이 없음
    
- 다양한 서비스 유형:
    
    IP는 다양한 서비스 유형을 지원함
    
    - 유니캐스트 : 한 목적지로 패킷을 전송하는 가장 일반적인 유형.
    - 멀티캐스트 : 그룹에 속한 호스트에게 패킷을 전송하는 유형.
- 버전:
    
    현재 주로 사용되는 IP 버전은 IPv4와 IPv6.
    
    - IPv4 = 32비트 주소 체계로 한정된 주소 공간을 가지고 있음
    - IPv6 = 128비트 주소 체계를 사용하여 주소 고갈 문제를 해결하고 더 많은 주소 공간을 제공함
    

**TCP (Transmission Control Protocol) : 신뢰성 있는 데이터 전송을 제공하기 위해 설계됨**

- 연결 설정/해제 :
    - 연결 지향적인 프로토콜로 통신을 위해 먼저 클라이언트와 서버 간의 연결을 설정하고 
    데이터를 전송한 후 연결을 해제하는 과정을 거침
    - 3-way 핸드셰이크를 통해 클라이언트와 서버 간에 연결을 설정함
    이는 SYN, SYN-ACK, ACK 패킷을 주고받으면서 연결을 수립하는 과정
    - 연결 설정이 완료되면 양쪽은 데이터를 주고받을 수 있게 됨.
    연결을 해제하기 위해서는 4-way 핸드셰이크 과정을 거침
- 신뢰성과 순서 보장 :
    - 데이터의 신뢰성을 보장하며 손실, 중복, 순서 변경 등의 문제를 감지하고 복구함
    - 시퀀스 번호와 확인 응답 번호를 사용함.
    시퀀스 번호는 데이터의 순서를 식별하고, 확인 응답 번호는 데이터의 정상적인 수신을 확인
    - 수신측은 데이터를 수신한 후 확인 응답을 보내어 송신측이 데이터의 수신 여부를 알 수 있게 하며,
    송신측은 확인 응답을 받지 못하면 데이터를 재전송함
- 흐름 제어 :
    - 흐름 제어 기능을 통해 송신측과 수신측의 데이터 전송 속도를 조절해 네트워크 혼잡과 데이터의 손실을 방지함
    - 수신측은 윈도우 크기를 통해 자신이 받을 수 있는 데이터의 양을 알려주고, 송신측은 이에 맞춰 데이터를 전송함
- 혼잡 제어 :
    - 혼잡 제어 기능을 사용해 네트워크의 혼잡 상태를 감지하고 송신 속도를 조절함
    - 혼잡 윈도우 크기를 동적으로 조절해 혼잡 상황을 완화하고, 패킷 손실을 최소화함
- 패킷 분할과 재조립 :
    - 데이터를 작은 패킷으로 분할하여 전송하고, 수신측에서는 패킷을 재조립하여 원본 데이터로 복구함
    - 이를 통해 큰 데이터를 효율적으로 전송할 수 있음

**UDP (User Datagram Protocol) : 비연결성 프로토콜로서 신뢰성보다는 빠른 데이터 전송이 목적**

- 비연결형 프로토콜:
    - UDP는 연결 설정과 해제 과정이 없이 데이터를 전송함
    따라서 신뢰성과 순서 보장을 위한 추가 오버헤드가 없어 TCP보다 빠른 전송 가능함
    - 그러나 데이터의 손실, 중복, 순서 변경 등을 보장하지 않으므로, 
    애플리케이션에서 이러한 기능을 추가로 처리해야함
- 패킷 전달:
    - 데이터를 패킷 단위로 전송함.
    패킷은 독립적으로 처리되며, 각 패킷은 목적지 IP 주소와 포트 번호를 가지고 있음
    - 수신측에서는 패킷을 독립적으로 처리하며, 순서나 완전성을 보장하지 않음
- 신뢰성과 순서 보장 부재:
    - 데이터의 신뢰성을 보장하지 않음
    - 패킷 손실이나 순서 변경이 발생할 수 있으며, 이러한 문제를 처리하기 위한 추가 메커니즘이 필요함
    - 일반적으로 UDP는 TCP보다 더 빠른 데이터 전송이 필요한 애플리케이션에 적합함 
    (실시간 스트리밍, DNS 등)
- 낮은 오버헤드:
    - TCP보다 간단한 프로토콜이므로, 데이터 전송에 필요한 오버헤드가 적음 
    이는 전송 지연을 줄이고 대역폭을 효율적으로 사용하는 데 도움을 줌
- 멀티캐스트 및 브로드캐스트 지원:
    - 멀티캐스트와 브로드캐스트를 지원하여 한 번에 여러 대상에게 데이터를 전송할 수 있음
    - 이를 통해 멀티미디어 스트리밍, IP 음성 및 비디오 통화 등에 유용하게 사용될 수 있음

---

## 5. TCP/IP의 응용

- 웹 통신 : HTTP (Hypertext Transfer Protocol)
    - 웹 브라우저와 웹 서버 간의 통신을 위해 사용되는 프로토콜
    - TCP/IP 위에서 동작하며, 웹 페이지의 요청과 응답을 처리하여 웹 컨텐츠를 전송함
    - 웹 브라우저가 HTTP 요청을 보내면 웹 서버는 요청을 처리하고 필요한 데이터를 HTTP 응답으로 반환함
- 파일 전송 : FTP (File Transfer Protocol)
    - 파일 전송을 위한 프로토콜로서, 파일의 업로드, 다운로드, 삭제 등을 처리함
    - TCP/IP 위에서 동작하며, 클라이언트와 서버 간에 파일 전송을 안정적으로 수행함
    - 익명 FTP와 인증 FTP로 구분되며, 파일 전송을 위한 명령어와 응답 형식을 정의함
    - 파일 업로드, 다운로드, 삭제, 이동 등의 작업을 지원
- 이메일 통신 : SMTP (Simple Mail Transfer Protocol)
    - 전자 메일을 송신하는 데 사용되는 프로토콜
    - TCP/IP 위에서 동작하며, 이메일 클라이언트가 이메일 서버에게 메일을 송신하고, 
    메일 서버 간에 메일을 전송하는 역할을 함
- 원격 접속 : SSH (Secure Shell Protocol)
    - 원격 시스템에 안전하게 접속하기 위한 프로토콜.
    - 암호화된 통신을 통해 원격 시스템에 로그인하고, 명령을 실행하거나 파일을 전송할 수 있음
- 인터넷 전화 : VoIP (Voice over Internet Protocol)
    - 음성 통화를 인터넷을 통해 전송하는 기술.
    - TCP/IP 기반의 네트워크를 사용하여 음성 데이터를 패킷화하여 전송하고, 
    수신측에서는 패킷을 재조립하여 음성을 재생함
- 도메인 이름 해석 : DNS (Domain Name System)
    - 도메인 이름을 IP 주소로 변환하거나, IP 주소를 도메인 이름으로 변환하기 위해 사용됨
    - 사용자가 도메인 이름을 입력하면 DNS는 해당 도메인 이름에 대한 IP 주소를 찾아줌
- 네트워크 보안 : IPsec (IP Security)
    - 네트워크에서 데이터의 기밀성, 무결성, 인증을 보장하기 위한 보안 프로토콜.
    - 가상 사설망(VPN) 구축이나 데이터 암호화에 사용됨


## Reference
- [https://aws-hyoh.tistory.com/entry/TCPIP-쉽게-이해하기](https://aws-hyoh.tistory.com/entry/TCPIP-%EC%89%BD%EA%B2%8C-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0)
- https://overcome-the-limits.tistory.com/554
- https://wooono.tistory.com/507
- https://jeongkyun-it.tistory.com/180
